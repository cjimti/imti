<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on IMTI</title>
    <link>https://imti.co/tags/golang/</link>
    <description>Recent content in Golang on IMTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://imti.co/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Microservices Workflow with Golang and Gitlab CI</title>
      <link>https://imti.co/gitlabci-golang-microservices/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/gitlabci-golang-microservices/</guid>
      <description>Many of the resources on Cloud Native Microservices show you how easy it is to get up and running with AWS or GKE. I think this is great but for the fact that I see a trend (in my clients at least) of associating concepts with particular products or worse, companies. I love Amazon, but it&amp;rsquo;s not THE cloud). In my opinion, to embrace Cloud Native and Microservices you should develop some, and host them yourself.</description>
    </item>
    
    <item>
      <title>Reverse Proxy in Golang</title>
      <link>https://imti.co/golang-reverse-proxy/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/golang-reverse-proxy/</guid>
      <description>Reverse proxies are standard components in many web architectures, from Nginx in front of php-fpm serving Drupal or Wordpress, to endless mixtures of load balancers, security appliances, and popular firewall applications. Reverse proxies differ from forward proxies in little but their intended implementation, be it service-side or client side. The following information is useful in either context. However, I focus on a service-side architecture. Further down this article, I&amp;rsquo;ll be going over the reasonably simple go code needed to develop a basic, yet production quality proxy, but first I&amp;rsquo;ll give you my take on why they solve so many problems and offer up my little workhorse, n2proxy.</description>
    </item>
    
    <item>
      <title>Golang to Jupyter</title>
      <link>https://imti.co/golang-to-jupyter/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/golang-to-jupyter/</guid>
      <description>Jupyter Notbooks have been a popular technology in the Python data science community for a while now, especially in academics. Jupyter Notebooks are a way to mix inline, executable code with documentation in a presentation format. Best practices in organizing source code are not always the most efficient at communicating it&amp;rsquo;s functionality to a user.
While the intention of a programming language is the abstraction of computational complexity into a simplified language humans can read and write, they must always weigh toward the efficiency of the primary interpreter, the computer.</description>
    </item>
    
    <item>
      <title>JWT Microservice, Tokenize Remote APIs</title>
      <link>https://imti.co/jwt-microservice/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/jwt-microservice/</guid>
      <description>txToken is a small high performance microservice utility container. txToken is used for adding JSON Web Token based security to existing or new API development. txToken is specifically for systems that communicate in JSON over HTTP. txToken is called from a client with a JSON post body and passes received JSON to a remote endpoint. JSON retrieved from a remote endpoint is used to create a JWT token with an HS256 symmetrically encrypted signature.</description>
    </item>
    
  </channel>
</rss>