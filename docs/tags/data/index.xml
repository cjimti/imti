<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on IMTI</title>
    <link>https://mk2.imti.co/tags/data/</link>
    <description>Recent content in Data on IMTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mk2.imti.co/tags/data/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elasticsearch Essential Queries</title>
      <link>https://mk2.imti.co/elasticsearch-essential-queries/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/elasticsearch-essential-queries/</guid>
      <description>The following is an overview for querying Elasticsearch. Over the years I have tried to assemble developer notes for myself and my team on a variety of platforms, languages and frameworks, a type of cheat-sheet but with context, not a comprehensive how-to, but a decent 15-minute overview of the features we are most likely to implement in a given iteration.
Explore the Elasticsearch official documentation: Search in Depth.
 Contents     Motivation Following Along with Elasticsearch and Kubernetes Vocabulary Basic CRUD API  Delete an Index Create an Index Create or Update a Document (Upsert) Get a Document  Mappings, Types and Metadata  Get Mapping Create a Mapping  Searching Range Filtering Aggregations  Counts Averages, Minimums and Maximums Percentile Percent by Rank Percent by Rank Interval  Resources     Motivation My team and I work with a lot of SQL-based data, from MySQL, SQLite and even our large Cassandra cluster, however, our reporting systems are built on Elasticsearch.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Matplotlib and Seaborn</title>
      <link>https://mk2.imti.co/python-data-essentials-matplotlib-seaborn/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/python-data-essentials-matplotlib-seaborn/</guid>
      <description>There is an overwhelming number of options for developers needing to provide data visualization. The most popular library for data visualization in Python is Matplotlib, and built directly on top of Matplotlib is Seaborn. The Seaborn library is &amp;ldquo;tightly integrated with the PyData stack, including support for numpy and pandas data structures and statistical routines from scipy and statsmodels.&amp;rdquo;
This article is only intended to get you started with Matplotlib and Seaborn.</description>
    </item>
    
    <item>
      <title>Webpage to PDF Microservice</title>
      <link>https://mk2.imti.co/webpage-to-pdf-microservice/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/webpage-to-pdf-microservice/</guid>
      <description>I create a lot of data visualizations for clients, many of which are internal, portal-style websites that present data in real time, as well as give options for viewing reports from previous time-frames. PDFs are useful for data such as bank statements or any form of time-snapshot progress reporting. It is common for clients to want PDF versions generated on a regular basis for sharing through email or other technologies.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Pandas</title>
      <link>https://mk2.imti.co/python-data-essentials-pandas/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/python-data-essentials-pandas/</guid>
      <description>Pandas bring Python a data type equivalent to super-charged spreadsheets. Pandas add two highly expressive data structures to Python, Series and DataFrame. Pandas Series and DataFrames provide a performant analysis and manipulation of “relational” or “labeled” data similar to relational database tables like MySQL or the rows and columns of Excel. Pandas are great for working with time series data as well as arbitrary matrix data, and unlabeled data.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Numpy</title>
      <link>https://mk2.imti.co/python-data-essentials-numpy/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/python-data-essentials-numpy/</guid>
      <description>Python is one of The Most Popular Languages for Data Science, and because of this adoption by the data science community, we have libraries like NumPy, Pandas and Matplotlib. NumPy at it&amp;rsquo;s core provides a powerful N-dimensional array objects in which we can perform linear algebra, Pandas give us data structures and data analysis tools, similar to working with a specialized database or powerful spreadsheets and finally Matplotlib to generate plots, histograms, power spectra, bar charts, error charts and scatterplots to name a few.</description>
    </item>
    
    <item>
      <title>SQL Foundations</title>
      <link>https://mk2.imti.co/sql-select-joins-aliases/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/sql-select-joins-aliases/</guid>
      <description>The following is an attempt at explaining the basics of an SQL query, and more importantly how I believe you can best think through them. All queries can be broken down into the basics of this declarative language.
I recently helped a co-worker read through a large SQL query with a few dozen joins and left joins, alias, and recursions. He is mostly a front-end integrator and although he has been tinkering with SQL for years, he never really understood the basics.</description>
    </item>
    
    <item>
      <title>Don&#39;t Install cqlsh</title>
      <link>https://mk2.imti.co/dont-install-cqlsh/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/dont-install-cqlsh/</guid>
      <description>We live in a world of process isolation and tools that make utilizing it extremely simple, with apps like Docker we can perform dependency management with dependency isolation. As I am slowly becoming a fanboy of containerization, I look forward to the day when typing ps on my local workstation or remote server is nearly synonymous with commands like docker ps or kubectl get services.
Case: Cassandra development and your local workstation.</description>
    </item>
    
  </channel>
</rss>