<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on IMTI</title>
    <link>https://mk2.imti.co/tags/devops/</link>
    <description>Recent content in DevOps on IMTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mk2.imti.co/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Team Access - RBAC for developers and QA</title>
      <link>https://mk2.imti.co/team-kubernetes-remote-access/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/team-kubernetes-remote-access/</guid>
      <description>RBAC (Role Based Access Control) allows our Kubernetes clusters to provide the development team better visibility and access into the development, staging and production environments than it has have ever had in the past. Developers using the command line tool kubectl, can explore the network topology of running microservices, tail live server logs, proxy local ports directly to services or even execute shells into running pods.
Kubernetes and GitlabCI are the central components of our DevOps toolchain and have increased our productivity by many multiples over the traditional approaches of the past.</description>
    </item>
    
    <item>
      <title>A Microservices Workflow with Golang and Gitlab CI</title>
      <link>https://mk2.imti.co/gitlabci-golang-microservices/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/gitlabci-golang-microservices/</guid>
      <description>Many of the resources on Cloud Native Microservices show you how easy it is to get up and running with AWS or GKE. I think this is great but for the fact that I see a trend (in my clients at least) of associating concepts with particular products or worse, companies. I love Amazon, but it&amp;rsquo;s not THE cloud). In my opinion, to embrace Cloud Native and Microservices you should develop some, and host them yourself.</description>
    </item>
    
    <item>
      <title>Reverse Proxy in Golang</title>
      <link>https://mk2.imti.co/golang-reverse-proxy/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mk2.imti.co/golang-reverse-proxy/</guid>
      <description>Reverse proxies are standard components in many web architectures, from Nginx in front of php-fpm serving Drupal or Wordpress, to endless mixtures of load balancers, security appliances, and popular firewall applications. Reverse proxies differ from forward proxies in little but their intended implementation, be it service-side or client side. The following information is useful in either context. However, I focus on a service-side architecture. Further down this article, I&amp;rsquo;ll be going over the reasonably simple go code needed to develop a basic, yet production quality proxy, but first I&amp;rsquo;ll give you my take on why they solve so many problems and offer up my little workhorse, n2proxy.</description>
    </item>
    
  </channel>
</rss>