<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on IMTI</title>
    <link>https://imti.co/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on IMTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Apr 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://imti.co/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rSync Files on Interval</title>
      <link>https://imti.co/raspberry-pi-rsync-interval/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/raspberry-pi-rsync-interval/</guid>
      <description>A recurring requirement for my IOT projects involves keeping a set of files synced with a central server. Many of these projects include media players, kiosk systems, or applications that need frequently updated configuration files, all while entirely unattended, and in most cases unreachable through firewalls. I have one project that alone has 2000+ devices pulling media continuously from an rsync server. Many of these devices are on doggy wifi networks.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3 - WiFi Station&#43;AP</title>
      <link>https://imti.co/iot-wifi/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/iot-wifi/</guid>
      <description>Update: Looking for contributors.
   Golang Size Pulls           IOT Wifi is very small/8MB Docker Container built for the Raspberry Pi 3. IOT Wifi exposes a simple JSON based REST API for controlling the wireless network interface. This container allows the Raspberry Pi to accept wifi connections as an access point (aka AP) while at the same time connecting to an existing wifi network (station mode).</description>
    </item>
    
    <item>
      <title>Raspberry Pi - Serial Number</title>
      <link>https://imti.co/raspberry-pi-serial/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/raspberry-pi-serial/</guid>
      <description>Getting the unique serial number from a Raspberry Pi.
cat /proc/cpuinfo | grep ^Serial | cut -d&amp;quot;:&amp;quot; -f2  Example output:
 00000000e215b4a2  An interesting use for this is &amp;ldquo;binding&amp;rdquo; software, encryption or other servcies to a specific Pi. Found this in a suggestion on the Stack Overflow question &amp;ldquo;Securing data on SD card Raspberry Pi&amp;rdquo;
 Support this blog! Buy my new book: Advanced Platform Development with Kubernetes  What You&#39;ll Learn Build data pipelines with MQTT, NiFi, Logstash, MinIO, Hive, Presto, Kafka and Elasticsearch Leverage Serverless ETL with OpenFaaS Explore Blockchain networking with Ethereum Support a multi-tenant Data Science platform with JupyterHub, MLflow and Seldon Core Build a Multi-cloud, Hybrid cluster, securely bridging on-premise and cloud-based Kubernetes nodes    </description>
    </item>
    
  </channel>
</rss>
