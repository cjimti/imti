<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on IMTI</title>
    <link>https://imti.co/post/</link>
    <description>Recent content in Posts on IMTI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://imti.co/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Blockchain</title>
      <link>https://imti.co/blockchain/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/blockchain/</guid>
      <description>The Internet of Transactions Blockchain may be a recent entry to the technology landscape. However, it has quickly become an essential iteration in the evolution of peer-to-peer communication and distributed computing. Originally developed as a way to protect digital currency, Blockchain technologies now support any digital asset, from signal data to complex messaging, to the execution of business logic through code. Blockchain technologies are rapidly forming a new decentralized internet of transactions.</description>
    </item>
    
    <item>
      <title>Kubernetes Port Forwarding for Local Development</title>
      <link>https://imti.co/kubernetes-port-forwarding/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes-port-forwarding/</guid>
      <description>kubefwd helps to enable a seamless and efficient way to develop applications and services on a local workstation. Locally develop applications that intend to interact with other services in a Kubernetes cluster. kubefwd allows applications with connection strings like http://elasticsearch:9200/ or tcp://db:3306 to communicate into the remote cluster. kubefwd can be used to reduce or eliminate the need for local environment specific connection configurations.
Developing services in a Microservices architecture presents local development challenges, especially when the service you are developing needs to interact with a mixture of other services.</description>
    </item>
    
    <item>
      <title>FaaS on Kubernetes</title>
      <link>https://imti.co/fass-kubeless-kubernetes/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/fass-kubeless-kubernetes/</guid>
      <description>FaaS or Function as a Service also known as Serverless computing implementations are gaining popularity. Discussed often are the cost savings and each implementations relationship to the physical and network architecture of a specific platform or vendor. While many of the cost and infrastructure advantages of FaaS are compelling, its only one of many advantages. Below, I hope to demonstrate how easy it is to develop and deploy FaaS components into a custom Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>Elasticsearch Essential Queries</title>
      <link>https://imti.co/elasticsearch-essential-queries/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/elasticsearch-essential-queries/</guid>
      <description>The following is an overview for querying Elasticsearch. Over the years I have tried to assemble developer notes for myself and my team on a variety of platforms, languages and frameworks, a type of cheat-sheet but with context, not a comprehensive how-to, but a decent 15-minute overview of the features we are most likely to implement in a given iteration.
Explore the Elasticsearch official documentation: Search in Depth.
 Contents     Motivation Following Along with Elasticsearch and Kubernetes Vocabulary Basic CRUD API  Delete an Index Create an Index Create or Update a Document (Upsert) Get a Document  Mappings, Types and Metadata  Get Mapping Create a Mapping  Searching Range Filtering Aggregations  Counts Averages, Minimums and Maximums Percentile Percent by Rank Percent by Rank Interval  Resources     Motivation My team and I work with a lot of SQL-based data, from MySQL, SQLite and even our large Cassandra cluster, however, our reporting systems are built on Elasticsearch.</description>
    </item>
    
    <item>
      <title>Remote Query Elasticsearch on Kubernetes</title>
      <link>https://imti.co/remote-query-kubernetes-elasticsearch/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/remote-query-kubernetes-elasticsearch/</guid>
      <description>Developing on our local workstations has always been a conceptual challenge for my team when it comes to remote data access. Local workstation-based development of services that intend to connect to a wide range of remote services that may have no options for external connections poses a challenge. Mirroring the entire development environment is possible in many cases, just not practical.
In days before Kubernetes, writing code in IDEs on our local workstation meant we had only a few options for developing server-side-API-style services that needed to connect to a database.</description>
    </item>
    
    <item>
      <title>High Traffic JSON Data into Elasticsearch on Kubernetes</title>
      <link>https://imti.co/post-json-elasticsearch-kubernetes/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/post-json-elasticsearch-kubernetes/</guid>
      <description>IOT devices, Point-of-Sale systems, application events or any client that sends data destined for indexing in Elasticsearch often need to send and forget, however, unless that data is of low value there needs to be assurance that arrives at its final destination. Back-pressure and database outages can pose a considerable threat to data integrity.
 Contents     Background Overview Development Environment  the-project Namespace  The Project: Weather (wx) Data rxtx for Store-and-Forward  wx-rxtx Service wx-rxtx StatefulSet  rtBeat to Collect, Buffer and Publish  wx-rtbeat Service wx-rtbeat ConfigMap wx-rtbeat Deployment  Client Simulation / Kubernetes Cron Performance Conclusion Reference     Background High availability and high performance often mean burdensome complexity.</description>
    </item>
    
    <item>
      <title>Kibana on Kubernetes</title>
      <link>https://imti.co/kibana-kubernetes/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kibana-kubernetes/</guid>
      <description>This guide walks through a process for setting up Kibana within a namespace on a Kubernetes cluster. If you followed along with Production Grade Elasticsearch on Kubernetes then aside from personal or corporate preferences, little modifications are necessary for the configurations below.
 Contents     Project Namespace Service Kibana ConfigMap Deployment Basic Auth TLS Certificate (Optional) Ingress Conclusion Resources     Project Namespace I use the-project as a namespace for all my examples and testing.</description>
    </item>
    
    <item>
      <title>Production Grade Elasticsearch on Kubernetes</title>
      <link>https://imti.co/kubernetes-production-elasticsearch/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes-production-elasticsearch/</guid>
      <description>Installing production ready, Elasticsearch 6.2 on Kubernetes requires a hand full of simple configurations. The following guide is a high-level overview of an installation process using Elastic&amp;rsquo;s recommendations for best practices. The Github project kubernetes-elasticsearch-cluster is used for the Elastic Docker container and built to operate Elasticsearch with nodes dedicated as Master, Data, and Client/Ingest.
The Docker container docker-elasticsearch, a &amp;ldquo;Ready to use, lean and highly configurable Elasticsearch container image.</description>
    </item>
    
    <item>
      <title>Kubernetes Team Access - RBAC for developers and QA</title>
      <link>https://imti.co/team-kubernetes-remote-access/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/team-kubernetes-remote-access/</guid>
      <description>RBAC (Role Based Access Control) allows our Kubernetes clusters to provide the development team better visibility and access into the development, staging and production environments than it has have ever had in the past. Developers using the command line tool kubectl, can explore the network topology of running microservices, tail live server logs, proxy local ports directly to services or even execute shells into running pods.
Kubernetes and GitlabCI are the central components of our DevOps toolchain and have increased our productivity by many multiples over the traditional approaches of the past.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Matplotlib and Seaborn</title>
      <link>https://imti.co/python-data-essentials-matplotlib-seaborn/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/python-data-essentials-matplotlib-seaborn/</guid>
      <description>There is an overwhelming number of options for developers needing to provide data visualization. The most popular library for data visualization in Python is Matplotlib, and built directly on top of Matplotlib is Seaborn. The Seaborn library is &amp;ldquo;tightly integrated with the PyData stack, including support for numpy and pandas data structures and statistical routines from scipy and statsmodels.&amp;rdquo;
This article is only intended to get you started with Matplotlib and Seaborn.</description>
    </item>
    
    <item>
      <title>Webpage to PDF Microservice</title>
      <link>https://imti.co/webpage-to-pdf-microservice/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/webpage-to-pdf-microservice/</guid>
      <description>I create a lot of data visualizations for clients, many of which are internal, portal-style websites that present data in real time, as well as give options for viewing reports from previous time-frames. PDFs are useful for data such as bank statements or any form of time-snapshot progress reporting. It is common for clients to want PDF versions generated on a regular basis for sharing through email or other technologies.</description>
    </item>
    
    <item>
      <title>A Microservices Workflow with Golang and Gitlab CI</title>
      <link>https://imti.co/gitlabci-golang-microservices/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/gitlabci-golang-microservices/</guid>
      <description>Many of the resources on Cloud Native Microservices show you how easy it is to get up and running with AWS or GKE. I think this is great but for the fact that I see a trend (in my clients at least) of associating concepts with particular products or worse, companies. I love Amazon, but it&amp;rsquo;s not THE cloud). In my opinion, to embrace Cloud Native and Microservices you should develop some, and host them yourself.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Pandas</title>
      <link>https://imti.co/python-data-essentials-pandas/</link>
      <pubDate>Sun, 17 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/python-data-essentials-pandas/</guid>
      <description>Pandas bring Python a data type equivalent to super-charged spreadsheets. Pandas add two highly expressive data structures to Python, Series and DataFrame. Pandas Series and DataFrames provide a performant analysis and manipulation of “relational” or “labeled” data similar to relational database tables like MySQL or the rows and columns of Excel. Pandas are great for working with time series data as well as arbitrary matrix data, and unlabeled data.</description>
    </item>
    
    <item>
      <title>Python Data Essentials - Numpy</title>
      <link>https://imti.co/python-data-essentials-numpy/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/python-data-essentials-numpy/</guid>
      <description>Python is one of The Most Popular Languages for Data Science, and because of this adoption by the data science community, we have libraries like NumPy, Pandas and Matplotlib. NumPy at it&amp;rsquo;s core provides a powerful N-dimensional array objects in which we can perform linear algebra, Pandas give us data structures and data analysis tools, similar to working with a specialized database or powerful spreadsheets and finally Matplotlib to generate plots, histograms, power spectra, bar charts, error charts and scatterplots to name a few.</description>
    </item>
    
    <item>
      <title>Reverse Proxy in Golang</title>
      <link>https://imti.co/golang-reverse-proxy/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/golang-reverse-proxy/</guid>
      <description>Reverse proxies are standard components in many web architectures, from Nginx in front of php-fpm serving Drupal or Wordpress, to endless mixtures of load balancers, security appliances, and popular firewall applications. Reverse proxies differ from forward proxies in little but their intended implementation, be it service-side or client side. The following information is useful in either context. However, I focus on a service-side architecture. Further down this article, I&amp;rsquo;ll be going over the reasonably simple go code needed to develop a basic, yet production quality proxy, but first I&amp;rsquo;ll give you my take on why they solve so many problems and offer up my little workhorse, n2proxy.</description>
    </item>
    
    <item>
      <title>Golang to Jupyter</title>
      <link>https://imti.co/golang-to-jupyter/</link>
      <pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/golang-to-jupyter/</guid>
      <description>Jupyter Notbooks have been a popular technology in the Python data science community for a while now, especially in academics. Jupyter Notebooks are a way to mix inline, executable code with documentation in a presentation format. Best practices in organizing source code are not always the most efficient at communicating it&amp;rsquo;s functionality to a user.
While the intention of a programming language is the abstraction of computational complexity into a simplified language humans can read and write, they must always weigh toward the efficiency of the primary interpreter, the computer.</description>
    </item>
    
    <item>
      <title>Essential Python 3</title>
      <link>https://imti.co/essential-python3/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/essential-python3/</guid>
      <description>This article is a quick tour of basic Python 3 syntax, components and structure. I intend to balance a cheat sheet format with hello world style boilerplate. If you are already a software developer and need a quick refresh on Python then I hope you benefit from my notes below.
I am a professional software developer for a software development company, and for that reason, I work with a lot of languages, expert in some, and ok in others.</description>
    </item>
    
    <item>
      <title>CORS on Kubernetes Ingress Nginx</title>
      <link>https://imti.co/kubernetes-ingress-nginx-cors/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes-ingress-nginx-cors/</guid>
      <description>Using ingress-nginx on Kubernetes makes adding CORS headers painless. Kubernetes ingress-nginx uses annotations as a quick way to allow you to specify the automatic generation of an extensive list of common nginx configuration options.
Example ingress configuration enabling CORS:
apiVersion: extensions/v1beta1 kind: Ingress metadata: name: api namespace: fuse labels: app: api annotations: nginx.ingress.kubernetes.io/enable-cors: &amp;quot;true&amp;quot; nginx.ingress.kubernetes.io/cors-allow-methods: &amp;quot;PUT, GET, POST, OPTIONS&amp;quot; nginx.ingress.kubernetes.io/cors-allow-origin: &amp;quot;https://admin.example.com&amp;quot; nginx.ingress.kubernetes.io/cors-allow-credentials: &amp;quot;true&amp;quot; spec: rules: - host: api.example.com http: paths: - backend: serviceName: api-example servicePort: 80 path: /api tls: - hosts: - api.</description>
    </item>
    
    <item>
      <title>Basic Auth on Kubernetes Ingress</title>
      <link>https://imti.co/kubernetes-ingress-basic-auth/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes-ingress-basic-auth/</guid>
      <description>Basic Auth is one of the oldest and easiest ways to secure a web page or API endpoint. Basic Auth does not have many features and lacks the sophistication of more modern access controls (see Ingress Nginx Auth Examples). However, Basic Auth is supported by nearly every major web client, library, and utility. Basic Auth is secure, stable and perfect for quick security on Kubernetes projects. Basic Auth can easily we swapped out later as requirements demand or provide a foundation for implementations such as OAuth 2 and JWT.</description>
    </item>
    
    <item>
      <title>JWT Microservice, Tokenize Remote APIs</title>
      <link>https://imti.co/jwt-microservice/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/jwt-microservice/</guid>
      <description>txToken is a small high performance microservice utility container. txToken is used for adding JSON Web Token based security to existing or new API development. txToken is specifically for systems that communicate in JSON over HTTP. txToken is called from a client with a JSON post body and passes received JSON to a remote endpoint. JSON retrieved from a remote endpoint is used to create a JWT token with an HS256 symmetrically encrypted signature.</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt, Kubernetes</title>
      <link>https://imti.co/lets-encrypt-kubernetes/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/lets-encrypt-kubernetes/</guid>
      <description>Use cert-manager to get port 443/https running with signed x509 certificates for Ingress on your Kubernetes Production Hobby Cluster. cert-manager is the successor to kube-lego and the preferred way to &amp;ldquo;automatically obtain browser-trusted certificates, without any human intervention.&amp;rdquo; using Let&amp;rsquo;s Encrypt.
You need to install Helm first if you do not already have it. Otherwise, check out my article Helm on Custom Kubernetes, especially if you are following along with my Production Hobby Cluster guides.</description>
    </item>
    
    <item>
      <title>Helm on Custom Kubernetes</title>
      <link>https://imti.co/helm-on-custom-cluster/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/helm-on-custom-cluster/</guid>
      <description>Helm is the official package manager for Kubernetes. If you are looking to start using Helm or want to test its capabilities, I suggest you set up a Production Hobby Cluster. This article is a continuation of the Production Hobby Cluster configuration but should be entirely useful on its own.
 From https://github.com/kubernetes/helm - Helm has two parts: a client (helm) and a server (tiller) - Tiller runs inside of your Kubernetes cluster and manages releases (installations) of your charts.</description>
    </item>
    
    <item>
      <title>Kubernetes Custom Upstream DNS</title>
      <link>https://imti.co/kubernetes-custom-dns/</link>
      <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes-custom-dns/</guid>
      <description>Customize the Upstream Nameservers used by kube-dns by Pods when looking up external hostnames from within a Kubernetes cluster. I found that adding custom Upstream Nameservers to my kube-dns solved many issues encountered in in the past with external hostname resolution on individual Pods.
If you want to experiment on a production-like cluster, I suggest reading my article &amp;ldquo;Production Hobby Cluster&amp;rdquo; for a guide on setting up a fun, cheap-yet-robust experimental cluster.</description>
    </item>
    
    <item>
      <title>Ingress on Custom Kubernetes</title>
      <link>https://imti.co/web-cluster-ingress/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/web-cluster-ingress/</guid>
      <description>There are more than a handful of ways to set up port 80 and 443 web ingress on a custom Kubernetes cluster. Specifically a bare metal cluster. If you are looking to experiment or learn on a non-production cluster, but something more true to production than minikube, I suggest you check out my previous article Production Hobby Cluster, a step-by-step guide for setting up a custom production capable Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>kubectl Context Multiple Clusters</title>
      <link>https://imti.co/kubectl-remote-context/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubectl-remote-context/</guid>
      <description>I use a few Kubernetes clusters on a daily basis, and I use kubectl to access and configure them from my workstation. There are dozens of ways to configure kubectl however I find the following method the easiest for me to manage and not make a mess.
I also set up test clusters from time-to-time, and so keeping my configs organized is, so I don&amp;rsquo;t confuse myself or make a mess.</description>
    </item>
    
    <item>
      <title>Formatting Drives on MacOS</title>
      <link>https://imti.co/mac-format-command-line/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/mac-format-command-line/</guid>
      <description>I have had this collection of old external drives hanging around for years. There was a time I was having terrible luck with hard drives. It turned out I managed to amass a collection of about eight drives from one terabyte to four terabytes.
Fortunately, I keep copies of nearly all my files on cloud drives, split between Amazon, Google and DropBox. I had a sneaking suspicion that the discs themselves were ok and somehow my Mac was communicating with the RAID controllers in a way that caused them to fail.</description>
    </item>
    
    <item>
      <title>Kubectl x509 Unable to Connect</title>
      <link>https://imti.co/kubectl-remote-x509-valid/</link>
      <pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubectl-remote-x509-valid/</guid>
      <description>Just set up a brand new cluster? Changed the domain or IP of your admin node? Then you may have encountered the error Unable to connect to the server: x509: certificate is valid for &amp;hellip;. The following is a fix for this common issue. However, there are often other reasons to rebuild your cluster cert, and it&amp;rsquo;s relatively easy.
TL;DR: &amp;ldquo;I don&amp;rsquo;t care about the fix I need to remote control my cluster.</description>
    </item>
    
    <item>
      <title>Production Hobby Cluster</title>
      <link>https://imti.co/hobby-cluster/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/hobby-cluster/</guid>
      <description>Setting up a production-grade Kubernetes cluster can be done on a hobby budget, and if this is true why mess around with a lesser grade. If you are investing time to learn distributed cloud computing or microservices, is the distance between $0 and 15 dollars a month worth the time in translating best practices? Kubernetes is designed to host production applications. My personal web applications may only be hobbies, but they might as well be production grade hobbies.</description>
    </item>
    
    <item>
      <title>SQL Foundations</title>
      <link>https://imti.co/sql-select-joins-aliases/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/sql-select-joins-aliases/</guid>
      <description>The following is an attempt at explaining the basics of an SQL query, and more importantly how I believe you can best think through them. All queries can be broken down into the basics of this declarative language.
I recently helped a co-worker read through a large SQL query with a few dozen joins and left joins, alias, and recursions. He is mostly a front-end integrator and although he has been tinkering with SQL for years, he never really understood the basics.</description>
    </item>
    
    <item>
      <title>rSync Files on Interval</title>
      <link>https://imti.co/raspberry-pi-rsync-interval/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/raspberry-pi-rsync-interval/</guid>
      <description>A recurring requirement for my IOT projects involves keeping a set of files synced with a central server. Many of these projects include media players, kiosk systems, or applications that need frequently updated configuration files, all while entirely unattended, and in most cases unreachable through firewalls. I have one project that alone has 2000+ devices pulling media continuously from an rsync server. Many of these devices are on doggy wifi networks.</description>
    </item>
    
    <item>
      <title>Burn SD Images on MacOs</title>
      <link>https://imti.co/mac-cli-burn-images/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/mac-cli-burn-images/</guid>
      <description>Use your terminal to burn images fast and easy with dd. I do a lot of professional and hobby development for projects using devices such as Raspberry Pi, Orange Pi, Libre Computer, Tinker Board, etc. I run across a lot of tutorials with people downloading and using big GUI apps with clunky drag and drop interfaces to burn images.
It&amp;rsquo;s one command in your terminal. Technically, it&amp;rsquo;s three, but I don&amp;rsquo;t count listing and unmounting as the final act of burning.</description>
    </item>
    
    <item>
      <title>Kubernetes - 413 Request Entity Too Large</title>
      <link>https://imti.co/413-request-entity-too-large/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/413-request-entity-too-large/</guid>
      <description>When setting up nginx ingress on Kubernetes for a private Docker Registry, I ran into an error when trying to push an image to it.
Error parsing HTTP response: invalid character &#39;&amp;lt;&#39; looking for beginning of value: &amp;quot;&amp;lt;html&amp;gt;\r\n&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;413 Request Entity Too Large&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;\r\n&amp;lt;body bgcolor=\&amp;quot;white\&amp;quot;&amp;gt;\r\n&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;413 Request Entity Too Large&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;\r\n&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.9.14&amp;lt;/center&amp;gt;\r\n&amp;lt;/body&amp;gt;\r\n&amp;lt;/html&amp;gt;\r\n&amp;quot;  The &amp;ldquo;413 Request Entity Too Large&amp;rdquo; error is something many accustomed to running nginx as a standard web server/proxy. nginx is configured to restrict the size of files it will allow over a post.</description>
    </item>
    
    <item>
      <title>Kubernetes Remote Control</title>
      <link>https://imti.co/kubectl-remote/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubectl-remote/</guid>
      <description>I use Minikube to run a local Kubernetes single node cluster (cluster?). However, I also work with a custom production cluster for work. This cluster consists of development and production nodes. I often need to switch between working on my local Minikube and the online Kubernetes cluster.
TIP: Visit the kubectl Cheat Sheet often.
The default configuration kubectl is stored in ~/.kube/config and if you have Minikube installed, it added the context minikube to your config.</description>
    </item>
    
    <item>
      <title>Microservices &amp; Kubernetes</title>
      <link>https://imti.co/microservices/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/microservices/</guid>
      <description>The following is a collection of articles, videos, and notes on Microservices. The Microservices architecture is a variant of the service-oriented architecture, a collection of loosely coupled services.
Articles  Background concept - &amp;ldquo;Open Data: Small Pieces Loosely Joined&amp;rdquo;, Tim O’Reilly Modern software design problems and solutions - &amp;ldquo;12-Fractured Apps&amp;rdquo;, Kelsey Hightower (SysAdmin @ Google) 12-Factor Defined - &amp;ldquo;The 12-Factor App&amp;rdquo;, Adam Wiggins Pros and Cons of Microservices - &amp;ldquo;Microservices&amp;rdquo; and Microservice Trade-Offs, Martin Fowler &amp;ldquo;What are containers and why do you need them?</description>
    </item>
    
    <item>
      <title>Don&#39;t Install Emacs</title>
      <link>https://imti.co/dont-install-emacs/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/dont-install-emacs/</guid>
      <description>I grew up on emacs. One of my first jobs I sat down at a terminal and was editing some files with pico, it&amp;rsquo;s what I knew since I used that fantastic email client pine. I was quickly told by my the lead developer that I need to use a real text editor if I&amp;rsquo;m going to progress in my career. He told me I need to try emacs, and after suffering through a few weeks of memorizing multi command-char sequences and training the muscle memory in my pinky to perform bizarre contortions of my left hand just to save my file, I became a convert.</description>
    </item>
    
    <item>
      <title>Don&#39;t Install cqlsh</title>
      <link>https://imti.co/dont-install-cqlsh/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/dont-install-cqlsh/</guid>
      <description>We live in a world of process isolation and tools that make utilizing it extremely simple, with apps like Docker we can perform dependency management with dependency isolation. As I am slowly becoming a fanboy of containerization, I look forward to the day when typing ps on my local workstation or remote server is nearly synonymous with commands like docker ps or kubectl get services.
Case: Cassandra development and your local workstation.</description>
    </item>
    
    <item>
      <title>Kubernetes Overview</title>
      <link>https://imti.co/kubernetes/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/kubernetes/</guid>
      <description>Getting started with Kubernetes for local development. I develop on a Mac however much of this is easily translated to windows.
The following is primarily a getting started guide wrapped around my personal development notes. This set of notes are specifically for my co-workers in helping them get up to speed quickly. If you see an error feel free to make a pull request or just add an issue.</description>
    </item>
    
    <item>
      <title>Raspberry Pi - Serial Number</title>
      <link>https://imti.co/raspberry-pi-serial/</link>
      <pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://imti.co/raspberry-pi-serial/</guid>
      <description>Getting the unique serial number from a Raspberry Pi.
cat /proc/cpuinfo | grep ^Serial | cut -d&amp;quot;:&amp;quot; -f2  Example output:
 00000000e215b4a2  An interesting use for this is &amp;ldquo;binding&amp;rdquo; software, encryption or other servcies to a specific Pi. Found this in a suggestion on the Stack Overflow question &amp;ldquo;Securing data on SD card Raspberry Pi&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>